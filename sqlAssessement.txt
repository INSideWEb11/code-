--What are the differences between local and global temporary tables?
--local temporary tables are tables only axcessed in single table intself 
--butthe global tempoerary tables can be axcessed in all over that databse used so 
--we can axcessed all over tables 

--What is CHECK constraint?
--CHECK constraint is function is checking table whether table consists of any constraint
--or not like primary key composit key 


--What is a Trigger?
--trigger is set of function in sql where we can pause all the opertions on the table 
--server also we can stop opertions like update delete insert opertion and table and server also

--What is an IDENTITY column in insert statements?
--IDENTITY column in insert statement is primary key where we can uiquely identify over table

--What is the difference between COMMIT and ROLLBACK?
--commit used in sql to saved the data after all tranactions complted 
--rollback in sql used to rollback means go back to the prevous saved point 

--What is Filtered Index?
--Filtered Index is the index used to axcess the data from table useing index 

--What is a JOIN, and mention its Types?
--join in the sql is used the join the two different table by using uique data from it
--inner join ,left join, right join full join 

--How can you relate a Foreign Key and a Primary Key?
--primary key is key which is used uiquely idendified the table primary no duplicate values 
--and unique where forigin key is key which represting other table from main table 
--ex emp and dep where emp has primary key and deptno also and in dept table its deptno and department
--here deptno is foregin key of emp table

--What is the difference between Stored Procedures and Functions?
--function are used to handle data in easily manner and using inbult function
--stored procedures are used to give external function create seprate function and use it

--What do you mean by Clustered Indexes?
--for the faster axcess of the data clustered index are used primary key is requied for used 
--of clustred index we can create over own cluster index on table and axcessed that

use ORG

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY ,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT,
	JOINING_DATE DATE,
	DEPARTMENT CHAR(25)
);

insert into Worker values(1,'ramu','raj',1200,'14-02-20','hr')
INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, SYSDATETIME(), 'HR');


		INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		--(001, 'Monika', 'Arora', 100000, SYSDATETIME(), 'HR'),
		(002, 'Niharika', 'Verma', 80000, SYSDATETIME(), 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, SYSDATETIME(), 'HR'),
		(004, 'Amitabh', 'Singh', 500000, SYSDATETIME(), 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, SYSDATETIME(), 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, SYSDATETIME(), 'Account'),
		(007, 'Satish', 'Kumar', 75000, SYSDATETIME(), 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, SYSDATETIME(), 'Admin');


CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT,
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, SYSDATETIME()),
		(002, 3000, SYSDATETIME()),
		(003, 4000, SYSDATETIME()),
		(001, 4500, SYSDATETIME()),
		(002, 3500, SYSDATETIME());


CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', SYSDATETIME()),
 (002, 'Executive', SYSDATETIME()),
 (008, 'Executive', SYSDATETIME()),
 (005, 'Manager', SYSDATETIME()),
 (004, 'Asst. Manager', SYSDATETIME()),
 (007, 'Executive', SYSDATETIME()),
 (006, 'Lead', SYSDATETIME()),
 (003, 'Lead', SYSDATETIME());


 insert into title values(009,'manager','2016-01-11')



-- Write an SQL query to clone a new table from another table.

create view  work
as
select * from Worker

select * from work

--Write an SQL query to print the FIRST_NAME and LAST_NAME from Worker table into a single column COMPLETE_NAME. A space char should separate them.
select FIRST_NAME+LAST_NAME as fullname from worker


--Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
select * from worker order by FIRST_NAME asc



--Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
select * from Worker where SALARY between 100000 and 500000

--Write an SQL query to fetch the no. of workers for each department in the descending order.
select count(WORKER_ID),department from worker group by department order by DEPARTMENT desc

--Create a DML trigger for update on table ‘Title’
create trigger trg_dml
on Title
FOR UPDATE
as
begin
	print 'You cannot perform DML Operations'
	rollback transaction --undo the DML Statements
end


--Create a Function to Calculate Simple Interest
CREATE FUNCTION dbo.Sp(@P DECIMAL(18,2) = 0.0,
                    @I DECIMAL(18,2) = 0.0, 
                    @T DECIMAL(18,2) = 0.0)
RETURNS INT
AS
BEGIN
    RETURN (@P * @I * @T / 100)
END

   select dbo.Sp(23,92,3) as result


GO

--Create a Stored Procedure to retrieve the average salary from ‘Worker’ table using Output parameter
 create procedure sp_Worker_salary(@avgsalary int output)
   as
   select @avgsalary = avg(salary),'Total salary details' from Worker
   end
   declare @avgsalary int
   exec sp_worker_salary.@avgsalary output
   print @avgsalary


--Create a filtered index on ‘Bonus_Date’ column in ‘Bonus’ table
create index ix_Bonus on Bonus(Bonus_Date)

--Create an explicit transaction to commit insert statements and rollback delete statements in ‘Worker’ table
BEGIN TRANSACTION
	insert into worker values(011, 'Monika', 'Arora', 100000, SYSDATETIME(), 'HR');-- gets commited
	SAVE TRANSACTION insert_stmt
	delete from Worker where WORKER_ID=002 --rollback
ROLLBACK TRANSACTION insert_stmt
COMMIT TRANSACTION
